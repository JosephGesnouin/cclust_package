import coclust
import argparse
from scipy.io import loadmat
from coclust.CoclustMod import CoclustMod

parser = argparse.ArgumentParser()

parser.add_argument("matrix_file", help="the matrix file path",  type=argparse.FileType('r'))

parser.add_argument("--file_type", help="the matrix file type", default='text' , choices=['matlab' ,'text'] )

parser.add_argument("--n_coclusters", help="the number of co-clusters",default = 2 , type=int)

parser.add_argument("--init", default=None , help="the path of a file containing an optional initial column index matrix. If None, random initialization is performed")

parser.add_argument("--max_iter", help="max number of iterations", default= 20 , type=int)

parser.add_argument("--class_file", default=None, help="the path of a file containing an index vector for documents. If provided the NMI will be reported.")

args = parser.parse_args()

##if args.matrix_file == None :
##    print "matrix file is needed"

model=CoclustMod(n_clusters=args.n_coclusters, init=args.init, max_iter=args.max_iter)
# existence and accessibility has already been checked
file_name=args.matrix_file
if args.file_type == "matlab" :  # TO DO: un arg. conditionnel donnant la cle dans le dict. Matlab
    matlab_dict=loadmat(file_name)
    X=matlab_dict['fea']
else :
    pass
    # TO DO: read the matrix from the text file
model.fit(X)

if args.class_file :
    print("TO DO: Perform evaluation")

##   python ./launch_coclust  ........./coclust/datasets/cstr.mat --file_type matlab  --n_coclusters 4
