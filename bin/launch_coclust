import argparse
import numpy as np
import scipy.sparse as sp

parser = argparse.ArgumentParser()

parser.add_argument("matrix_file", help="the matrix file path")

parser.add_argument("--n_coclusters", help="the number of co-clusters",default = 2 , type=int)

parser.add_argument("--init", default=None , help="the path of a file containing an optional initial column index matrix. If None, random initialization is performed")

parser.add_argument("--max_iter", help="max number of iterations", default= 8 , type=int)

parser.add_argument("--labels_file", default=None, help="the path of a file containing an index vector for documents. If provided the NMI will be reported.")

parser.add_argument("--input_format", default='matlab' , help="the format of the input file: matlab (default) or csv. If 'matlab' the key for the matrix must be 'fea'.")

parser.add_argument("--visu", action="store_true", help="Plot modularity values and reorganized matrix (requires numpy/scipy and matplotlib).")

parser.add_argument("--eval", action="store_true", help="evaluate using gold standard (requires availability of class labels and sklearn).")

args = parser.parse_args()



#####################################################################################
## 1) read the provided matlab matrix or build a matrix from a file in sparse format

if args.input_format == 'matlab' :
    from scipy.io import loadmat
    file_name = args.matrix_file
    matlab_dict = loadmat(file_name)
    X = matlab_dict['fea']
elif  args.input_format == 'csv' :
    # /home/frole/recherche/python_packaging/coclust/datasets/cstr.csv
    with open(args.matrix_file,'r') as f :
        f_line=f.readline().strip()
        t_line=f_line.split(',')
        X=sp.lil_matrix((475,1000))
        print(X.shape)
        for i, l in enumerate(f):
            l=l.strip()
            t=l.split(',')
            r,c,v=int(t[0]),int(t[1]),int(t[2])
            try : 
               X[r,c]=v
            except Exception as e :
                print(e)
                print("problem with line" , i)
                sys.exit(0)
else:
    print("Supported formats are: 'matlab' or 'csv'")

#####################################################################################
## 2) Initialization options

if args.init :
	W = sp.lil_matrix(np.loadtxt(args.init), dtype=float)
else:
	W = None

#####################################################################################
## 3) perform co-clustering

from coclust.CoclustMod import CoclustMod
model = CoclustMod(n_clusters=args.n_coclusters, init=W, max_iter=args.max_iter)
model.fit(X)

print("*****", "row labels",  "*****")
print(model.row_labels_)
print("*****", "column labels" , "*****")
print(model.column_labels_)

#####################################################################################
## 4) show convergence and reorganised matrix

import matplotlib

if args.visu :
 try :
   import matplotlib.pyplot as plt
   plt.plot(model.modularities,marker='o')
   plt.ylabel('Lc')
   plt.xlabel('Iterations')
   plt.title("Evolution of modularity")
   plt.savefig("modularities.png")
   plt.show()
  
   X=sp.csr_matrix(X)
   X_reorg= X[np.argsort(model.row_labels_)]
   X_reorg = X_reorg[:, np.argsort(model.column_labels_)]
   plt.spy(X_reorg,precision=0.8, markersize=0.9)
   plt.title("Reorganized matrix")
   plt.savefig("reorganized_matrix.png")
   plt.show()
 except Exception as e :
   print("Exception concerning the --visu option", e)
   print("This option requires Numpy/Scipy as well as Matplotlib.") 



#####################################################################################
## 5) evaluate using gold standard (if provided)


if args.eval :
 if args.labels_file :
  try:
  
    with open(labels_file, 'r') as f :
        labels=f.read().split()

    from sklearn.metrics import accuracy_score
    from sklearn.metrics.cluster import normalized_mutual_info_score
    from sklearn.metrics.cluster import adjusted_rand_score

    n=normalized_mutual_info_score(labels,self.row_labels_ )
    ari=adjusted_rand_score(labels, self.row_labels_)
    cm=confusion_matrix(labels, self.row_labels_)
    # accuracy=(total)/(nb_rows*1.)
    
    print( "nmi ==>" + str(n))
    print( "adjusted rand index ==>" + str(ari))
    print()
    print(cm)
  except Exception as e :
   print("Exception concerning the --eval option", e)
   print("This option requires Numpy/Scipy, Matplotlib and scikit-learn.") 
 else :
    print("To use the --eval option you need to specify a value for the --labels_file option.")

# launch_coclust  ~frole/recherche/python_packaging/coclust/datasets/cstr.mat --n_coclusters 4
# launch_coclust ~frole/recherche/python_packaging/coclust/datasets/cstr.csv  --input_format csv  --n_coclusters 4

#  python ./bin/launch_coclust ~frole/recherche/python_packaging/coclust/datasets/cstr.csv  --n_coclusters 4 --input_format csv --visu

